/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteImport } from './routes/_app'
import { Route as AppIndexRouteImport } from './routes/_app.index'
import { Route as AppShowRouteImport } from './routes/_app.show'
import { Route as AppNewRouteImport } from './routes/_app.new'
import { Route as AppBestRouteImport } from './routes/_app.best'
import { Route as AppAskRouteImport } from './routes/_app.ask'
import { Route as AppPostPostIdRouteImport } from './routes/_app.post.$postId'

const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AppShowRoute = AppShowRouteImport.update({
  id: '/show',
  path: '/show',
  getParentRoute: () => AppRoute,
} as any)
const AppNewRoute = AppNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AppRoute,
} as any)
const AppBestRoute = AppBestRouteImport.update({
  id: '/best',
  path: '/best',
  getParentRoute: () => AppRoute,
} as any)
const AppAskRoute = AppAskRouteImport.update({
  id: '/ask',
  path: '/ask',
  getParentRoute: () => AppRoute,
} as any)
const AppPostPostIdRoute = AppPostPostIdRouteImport.update({
  id: '/post/$postId',
  path: '/post/$postId',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/ask': typeof AppAskRoute
  '/best': typeof AppBestRoute
  '/new': typeof AppNewRoute
  '/show': typeof AppShowRoute
  '/': typeof AppIndexRoute
  '/post/$postId': typeof AppPostPostIdRoute
}
export interface FileRoutesByTo {
  '/ask': typeof AppAskRoute
  '/best': typeof AppBestRoute
  '/new': typeof AppNewRoute
  '/show': typeof AppShowRoute
  '/': typeof AppIndexRoute
  '/post/$postId': typeof AppPostPostIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteWithChildren
  '/_app/ask': typeof AppAskRoute
  '/_app/best': typeof AppBestRoute
  '/_app/new': typeof AppNewRoute
  '/_app/show': typeof AppShowRoute
  '/_app/': typeof AppIndexRoute
  '/_app/post/$postId': typeof AppPostPostIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/ask' | '/best' | '/new' | '/show' | '/' | '/post/$postId'
  fileRoutesByTo: FileRoutesByTo
  to: '/ask' | '/best' | '/new' | '/show' | '/' | '/post/$postId'
  id:
    | '__root__'
    | '/_app'
    | '/_app/ask'
    | '/_app/best'
    | '/_app/new'
    | '/_app/show'
    | '/_app/'
    | '/_app/post/$postId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/show': {
      id: '/_app/show'
      path: '/show'
      fullPath: '/show'
      preLoaderRoute: typeof AppShowRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/new': {
      id: '/_app/new'
      path: '/new'
      fullPath: '/new'
      preLoaderRoute: typeof AppNewRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/best': {
      id: '/_app/best'
      path: '/best'
      fullPath: '/best'
      preLoaderRoute: typeof AppBestRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/ask': {
      id: '/_app/ask'
      path: '/ask'
      fullPath: '/ask'
      preLoaderRoute: typeof AppAskRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/post/$postId': {
      id: '/_app/post/$postId'
      path: '/post/$postId'
      fullPath: '/post/$postId'
      preLoaderRoute: typeof AppPostPostIdRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppAskRoute: typeof AppAskRoute
  AppBestRoute: typeof AppBestRoute
  AppNewRoute: typeof AppNewRoute
  AppShowRoute: typeof AppShowRoute
  AppIndexRoute: typeof AppIndexRoute
  AppPostPostIdRoute: typeof AppPostPostIdRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppAskRoute: AppAskRoute,
  AppBestRoute: AppBestRoute,
  AppNewRoute: AppNewRoute,
  AppShowRoute: AppShowRoute,
  AppIndexRoute: AppIndexRoute,
  AppPostPostIdRoute: AppPostPostIdRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
