/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteImport } from './routes/_app'
import { Route as AppIndexRouteImport } from './routes/_app.index'
import { Route as AppCategoryRouteImport } from './routes/_app.$category'
import { Route as AppCategoryPostIdRouteImport } from './routes/_app.$category.$postId'

const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AppCategoryRoute = AppCategoryRouteImport.update({
  id: '/$category',
  path: '/$category',
  getParentRoute: () => AppRoute,
} as any)
const AppCategoryPostIdRoute = AppCategoryPostIdRouteImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => AppCategoryRoute,
} as any)

export interface FileRoutesByFullPath {
  '/$category': typeof AppCategoryRouteWithChildren
  '/': typeof AppIndexRoute
  '/$category/$postId': typeof AppCategoryPostIdRoute
}
export interface FileRoutesByTo {
  '/$category': typeof AppCategoryRouteWithChildren
  '/': typeof AppIndexRoute
  '/$category/$postId': typeof AppCategoryPostIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteWithChildren
  '/_app/$category': typeof AppCategoryRouteWithChildren
  '/_app/': typeof AppIndexRoute
  '/_app/$category/$postId': typeof AppCategoryPostIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/$category' | '/' | '/$category/$postId'
  fileRoutesByTo: FileRoutesByTo
  to: '/$category' | '/' | '/$category/$postId'
  id:
    | '__root__'
    | '/_app'
    | '/_app/$category'
    | '/_app/'
    | '/_app/$category/$postId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/$category': {
      id: '/_app/$category'
      path: '/$category'
      fullPath: '/$category'
      preLoaderRoute: typeof AppCategoryRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/$category/$postId': {
      id: '/_app/$category/$postId'
      path: '/$postId'
      fullPath: '/$category/$postId'
      preLoaderRoute: typeof AppCategoryPostIdRouteImport
      parentRoute: typeof AppCategoryRoute
    }
  }
}

interface AppCategoryRouteChildren {
  AppCategoryPostIdRoute: typeof AppCategoryPostIdRoute
}

const AppCategoryRouteChildren: AppCategoryRouteChildren = {
  AppCategoryPostIdRoute: AppCategoryPostIdRoute,
}

const AppCategoryRouteWithChildren = AppCategoryRoute._addFileChildren(
  AppCategoryRouteChildren,
)

interface AppRouteChildren {
  AppCategoryRoute: typeof AppCategoryRouteWithChildren
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppCategoryRoute: AppCategoryRouteWithChildren,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
